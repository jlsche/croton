#-*- coding: utf-8 -*-
from django.http import HttpResponseRedirect
import requests
import pymysql
import json
from datetime import datetime
from django.shortcuts import render
from django.http import StreamingHttpResponse
from django.http import HttpResponse
from django.template import loader
import os
import pytz
from datetime import datetime, timedelta

BASE = os.path.dirname(os.path.abspath(__file__))

def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")


def connect_mysql():
    db =  pymysql.connect(host='118.192.8.106', user='lingtelli', passwd='lingtellimi4ma3', db='croton', charset='utf8')
    dbc = db.cursor()
    dbc.execute('SET NAMES utf8;')
    dbc.execute('SET CHARACTER SET utf8;')
    dbc.execute('SET character_set_connection=utf8;')
    return db

def get_current_index(cur):
    cur.execute("select `AUTO_INCREMENT` from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA = 'croton' and TABLE_NAME = 'CrotonTemplate'")
    for row in cur:
        return row[0]+1

def handle_uploaded_file(f, path):
    with open(path, 'wb+') as dest:
        for chunk in f.chunks():
            dest.write(chunk)

def insert_db(conn, index, name, count):
    conn.cursor().execute("insert into CrotonTemplate (id, name, lang, raw_count) values (%s, %s, %s, %s)", (index, name, 'zhcn', count))
    conn.commit()

def get_dest_path(fname, index):
    return os.path.join(BASE,'data/'+str(index)+'/'+fname)

def check(request):
    return HttpResponse("Error:")


def crotonNum(request, num):
    # View code here...
    return render(request, 'croton_index.html', {"foo": "bar"},
        content_type="text/html")



def croton(request):
    # View code here...
    t = loader.get_template('croton_index.html')
    c = {'foo': 'bar'}
    return HttpResponse(t.render(c, request),
        content_type="text/html")


def create_post(request):
    if request.method == 'POST':
        post_text = request.POST.get('text')
        response_data = {}

        #post = Post(text=post_text, author=request.user)
        #post.save()

        response_data['result'] = 'Create post successful!'
        response_data['post_text'] = post_text
        #response_data['postpk'] = post.pk
        #response_data['text'] = post.text
        #response_data['created'] = post.created.strftime('%B %d, %Y %I:%M %p')
        #response_data['author'] = post.author.username

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )
    else:
        return HttpResponse(
            json.dumps({"nothing to see": "this isn't happening"}),
            content_type="application/json"
        )


def big_file_download(request):
    # do something...

    def file_iterator(file_name, chunk_size=512):
        with open(file_name) as f:
            while True:
                c = f.read(chunk_size)
                if c:
                    yield c
                else:
                    break
    if request.method == 'GET':
        the_file_name = request.POST.get('name')
        response = StreamingHttpResponse(file_iterator(the_file_name))

        return response


def upload(request):
    conn = connect_mysql()
    index = get_current_index(conn.cursor())

    if request.method == 'POST':
        rawdata = request.FILES['rawdata']
        role = request.FILES.get('role', None)

        pov = request.FILES.get('pov', None)

        name = request.POST.get('name')
        if rawdata is None:
            return HttpResponse('upload fail!')
        dest_path = os.path.join(BASE,'data/'+str(index)+'/')
        if not os.path.exists(dest_path):
            os.makedirs(dest_path)
        handle_uploaded_file(rawdata, get_dest_path('rawdata.csv', index))
        if role is not None:
            handle_uploaded_file(role, get_dest_path('role.csv', index))
        if pov is not None:
            handle_uploaded_file(pov, get_dest_path('pov.csv', index))
        insert_db(conn, index, name, sum(1 for row in open(get_dest_path('rawdata.csv', index))))
        return HttpResponseRedirect('/setup/')

    return render(request, 'upload.html', content_type='text/html')

def setup(request):
    conn = connect_mysql()
    cur = conn.cursor()
    cur.execute("select * from CrotonTemplate order by create_time desc")
    templates = []

    if request.method == 'POST':
        idx = request.POST.get('idx')
        atype = request.POST.get('type')
        tname = request.POST.get('name')
        base_url = 'http://118.192.8.106:3006/'
        dir_path = os.path.join(BASE, 'data/'+str(idx)+'/')
        if atype == "start_cluster":
            cthr = request.POST.get('cthr');
            gthr = request.POST.get('gthr');
            res = requests.get(base_url + 'startClustering?csvfile=' + dir_path + 'rawdata.csv&clusterthreshold='+str(cthr)+'&groupthreshold='+str(gthr))
            open(dir_path + "init", 'a+').close()
            print base_url + 'startClustering?csvfile=' + dir_path + 'rawdata.csv'
            print res.text
        elif atype == "build_cluster":
            res = requests.get(base_url + 'dumpMysql?template_id=' + str(idx))
            open(dir_path + "build", "a+").close()
            print base_url + 'dumpMysql?template_id=' + str(idx)
            print res.text
        elif atype == "analyze":
            res = requests.get(base_url + 'newRecord?template_id=' + str(idx) + "&record=" + request.POST.get('record'))
            #open(dir_path + "analyze", "a+").close()
            print base_url + 'newRecord?template_id=' + str(idx) + "&record=" + request.POST.get('record')
            print res.text
        elif atype == "delete":
            print 'delete'
            cur = conn.cursor()
            cur.execute("delete from CrotonTemplate where id = " + str(idx))
            conn.commit()
        return HttpResponseRedirect('/setup/')

    for row in cur:
        item = {}
        item["index"] = row[0]
        item["name"] = row[1]
        #item["time"] = row[4]
        item["row"] = row[5]
	
	date_object = pytz.timezone('Asia/Shanghai').localize(row[4])
	date_object = date_object + timedelta(hours=8)
	item["time"] = date_object.strftime('%Y{y}%m{m}%d{d} %H:%M:%S').format(y=u'年'.encode('utf8'), m=u'月'.encode('utf8'), d=u'日'.encode('utf8'))
	dir_path = os.path.join(BASE, 'data/'+str(row[0])+'/')

	if os.path.exists(dir_path + "error.log"):
	    with open(dir_path + 'error.log', 'r') as elog:
    		data=elog.read().replace('\n', '')
	    	item["action"] = data
        elif not os.path.exists(dir_path + "cluster_result.csv"):
            if not os.path.isfile(dir_path + "init"):
                item["action"] = "init_cluster"
                #open(dir_path + "init", 'a+').close()
            else:
                item["action"] = "wait_cluster"
        elif not os.path.exists(dir_path + 'cluster_finish'):
            if not os.path.isfile(dir_path + "build"):
                item["action"] = "build_cluster"
                #open(dir_path + "build", "a+").close()
            else:
                item["action"] = "wait_build"
        else:
            if not os.path.isfile(dir_path + "analyze"):
                item["action"] = "analyze"
                #open(dir_path + "analyze", "a+").close()
            else:
                item["action"] = "done"
        templates.append(item)

    return render(request, 'setup.html', {"templates": templates} ,content_type='text/html')



"""


$.ajax({
    url : "../post/", // the endpoint
    method : "POST", // http method
    data : {
        text : "test to post !!! ",
        csrfmiddlewaretoken : csrf

    }, // data sent with the post request

    // handle a successful response
    success : function(json) {
        
        console.log(json); // log the returned json to the console
        console.log("success"); // another sanity check
    },

    // handle a non-successful response
    error : function(xhr,errmsg,err) {
        $('body').html(xhr.responseText); // add the error to the dom
    }
});


"""
